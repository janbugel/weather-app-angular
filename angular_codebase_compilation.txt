
--- index.html ---
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>weather app</title>
  <base href="/">
  
  <meta name="viewport" content="width=device-width, initial-scale=1">
  
  <!-- Add Roboto font -->
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap" rel="stylesheet">
  
  <!-- Add icon library for any icons you may use -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
</head>
<body>
  <app-root></app-root>
</body>
</html>



--- main.ts ---
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';


platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));



--- styles.sass ---
/* You can add global styles to this file, and also import other style files */

@import '@angular/material/prebuilt-themes/indigo-pink.css'


--- app/app.component.html ---
<div class="app-container">
  <h1>{{ title }}</h1>
  <div class="tab-container">
    <mat-tab-group>
      <mat-tab label="Weather Table">
        <app-weather-table></app-weather-table>
      </mat-tab>
      <mat-tab label="Temperature Chart">
        <app-temperature-chart></app-temperature-chart>
      </mat-tab>
      <mat-tab label="Heat Index Calculator">
        <app-heat-index-calculator></app-heat-index-calculator>
      </mat-tab>
    </mat-tab-group>
  </div>
</div>
<router-outlet></router-outlet>



--- app/app-routing.module.ts ---
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { WeatherTableComponent } from './weather-table/weather-table.component';
import { TemperatureChartComponent } from './temperature-chart/temperature-chart.component';
import { HeatIndexCalculatorComponent } from './heat-index-calculator/heat-index-calculator.component';

const routes: Routes = [
  { path: '', redirectTo: '/weather-table', pathMatch: 'full' },
  { path: 'weather-table', component: WeatherTableComponent },
  { path: 'temperature-chart', component: TemperatureChartComponent }, // Ensure correct path for Temperature Chart component
  { path: 'heat-index-calculator', component: HeatIndexCalculatorComponent },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }



--- app/app.component.spec.ts ---
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule
      ],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'weather-app-angular'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('weather-app-angular');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, weather-app-angular');
  });
});



--- app/app.module.ts ---
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatTabsModule } from '@angular/material/tabs';
import { FormsModule } from '@angular/forms';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { TabsComponent } from './tabs/tabs.component';
import { WeatherTableComponent } from './weather-table/weather-table.component';
import { TemperatureChartComponent } from './temperature-chart/temperature-chart.component';
import { HeatIndexCalculatorComponent } from './heat-index-calculator/heat-index-calculator.component';
import { NgxChartsModule } from '@swimlane/ngx-charts'; // Add this import

@NgModule({
  declarations: [
    AppComponent,
    TabsComponent,
    WeatherTableComponent,
    TemperatureChartComponent,
    HeatIndexCalculatorComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    HttpClientModule, 
    MatTabsModule,
    FormsModule,
    NgxChartsModule // Add this module here for charts
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }



--- app/weather.service.ts ---
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class WeatherService {
  private baseUrl = 'https://api.open-meteo.com/v1';

  constructor(private http: HttpClient) { }

  getWeatherForecast(latitude: number, longitude: number): Observable<any> {
    const url = `${this.baseUrl}/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m`;
    return this.http.get(url);
  }
}



--- app/app.component.ts ---
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.sass']
})
export class AppComponent {
  public title: string;

  constructor() {
    this.title = 'Weather App Angular';
  }
}



--- app/app.component.sass ---
.app-container
  display: flex
  flex-direction: column
  align-items: center
  padding: 20px

h1
  color: #1976d2
  margin-bottom: 20px



--- app/weather.service.spec.ts ---
import { TestBed } from '@angular/core/testing';

import { WeatherService } from './weather.service';

describe('WeatherService', () => {
  let service: WeatherService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(WeatherService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});



--- app/tabs/tabs.component.html ---
<mat-tab-group>
  <mat-tab label="Weather Table">
    <app-weather-table></app-weather-table>
  </mat-tab>
  <mat-tab label="Temperature Chart">
    <app-temperature-chart></app-temperature-chart>
  </mat-tab>
  <mat-tab label="Heat Index Calculator">
    <app-heat-index-calculator></app-heat-index-calculator>
  </mat-tab>
</mat-tab-group>



--- app/tabs/tabs.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TabsComponent } from './tabs.component';

describe('TabsComponent', () => {
  let component: TabsComponent;
  let fixture: ComponentFixture<TabsComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [TabsComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(TabsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



--- app/tabs/tabs.component.ts ---
import { Component } from '@angular/core';

@Component({
  selector: 'app-tabs',
  templateUrl: './tabs.component.html',
  styleUrls: ['./tabs.component.sass']
})
export class TabsComponent {
  constructor() {}
}



--- app/tabs/tabs.component.sass ---



--- app/weather-table/weather-table.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { WeatherTableComponent } from './weather-table.component';

describe('WeatherTableComponent', () => {
  let component: WeatherTableComponent;
  let fixture: ComponentFixture<WeatherTableComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [WeatherTableComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(WeatherTableComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



--- app/weather-table/weather-table.component.html ---
<div *ngIf="combinedData.length; else loading">
  <h2>Weather Forecast and Historical Data for London</h2>
  <table>
    <thead>
      <tr>
        <th>Date/Time</th>
        <th>Weather State</th>
        <th>Temperature (Â°C)</th>
        <th>Surface Pressure (hPa)</th>
        <th>Relative Humidity (%)</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let data of combinedData">
        <td>{{ data.time }}</td>
        <td>{{ data.weatherState }}</td>
        <td>{{ data.temperature }}</td>
        <td>{{ data.pressure }}</td>
        <td>{{ data.humidity }}</td>
      </tr>
    </tbody>
  </table>
</div>
<ng-template #loading>
  <p>Loading weather data...</p>
</ng-template>



--- app/weather-table/weather-table.component.sass ---



--- app/weather-table/weather-table.component.ts ---
import { Component, OnInit } from '@angular/core';
import { WeatherService } from '../weather.service';

@Component({
  selector: 'app-weather-table',
  templateUrl: './weather-table.component.html',
  styleUrls: ['./weather-table.component.sass']
})
export class WeatherTableComponent implements OnInit {
  combinedData: any[] = [];

  constructor(private weatherService: WeatherService) { }

  ngOnInit(): void {
    this.fetchWeatherData();
  }

  fetchWeatherData(): void {
    this.weatherService.getWeatherForecast(52.52, 13.41).subscribe(
      forecastData => {
        const current = forecastData['current'];
        const hourly = forecastData['hourly'];

        // Assuming 'time' is an array of timestamps in seconds
        const times = hourly['time'].map((timestamp: number) => new Date(timestamp * 1000));

        // Assuming other data is in arrays corresponding to each timestamp
        const temperatures = hourly['temperature_2m'];
        const humidity = hourly['relative_humidity_2m'];
        const windSpeed = hourly['wind_speed_10m'];

        // Assuming all arrays have the same length
        for (let i = 0; i < times.length; i++) {
          this.combinedData.push({
            time: times[i],
            temperature: temperatures[i],
            humidity: humidity[i],
            windSpeed: windSpeed[i]
          });
        }
      },
      error => {
        console.error('Error fetching forecast data:', error);
      }
    );
  }
}



--- app/temperature-chart/temperature-chart.component.sass ---



--- app/temperature-chart/temperature-chart.component.ts ---
import { Component, OnInit } from '@angular/core';
import { WeatherService } from '../weather.service';

@Component({
  selector: 'app-temperature-chart',
  templateUrl: './temperature-chart.component.html',
  styleUrls: ['./temperature-chart.component.sass']
})
export class TemperatureChartComponent implements OnInit {
  public temperatureData: any[] = [];
  public view: [number, number] = [700, 300];
  public showXAxis = true;
  public showYAxis = true;
  public gradient = false;
  public showLegend = false;
  public showXAxisLabel = true;
  public xAxisLabel = 'Time';
  public showYAxisLabel = true;
  public yAxisLabel = 'Temperature (Â°C)';
  public timeline = true;
  public colorScheme = {
    domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA']
  };

  constructor(private weatherService: WeatherService) {}

  ngOnInit(): void {
    this.fetchTemperatureData();
  }

  fetchTemperatureData(): void {
    // Implement fetching temperature data from the service
  }

  transformDataForChart(times: string[], temperatures: number[]): any[] {
    // Implement transformation of data for chart
    return [];
  }
}



--- app/temperature-chart/temperature-chart.component.html ---
<div *ngIf="temperatureData && temperatureData.length > 0">
  <h2>Temperature Chart</h2>
  <ngx-charts-line-chart
      [view]="view"
      [results]="temperatureData"
      [gradient]="gradient"
      [xAxis]="showXAxis"
      [yAxis]="showYAxis"
      [legend]="showLegend"
      [showXAxisLabel]="showXAxisLabel"
      [showYAxisLabel]="showYAxisLabel"
      [xAxisLabel]="xAxisLabel"
      [yAxisLabel]="yAxisLabel"
      [timeline]="timeline">
  </ngx-charts-line-chart>
</div>



--- app/temperature-chart/temperature-chart.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TemperatureChartComponent } from './temperature-chart.component';

describe('TemperatureChartComponent', () => {
  let component: TemperatureChartComponent;
  let fixture: ComponentFixture<TemperatureChartComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [TemperatureChartComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(TemperatureChartComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



--- app/heat-index-calculator/heat-index-calculator.component.sass ---
.heat-index-calculator-container
  display: flex
  flex-direction: column
  align-items: center

.form-group
  margin-bottom: 15px

label
  display: block

input, select
  margin-top: 5px



--- app/heat-index-calculator/heat-index-calculator.component.ts ---
import { Component } from '@angular/core';

@Component({
  selector: 'app-heat-index-calculator',
  templateUrl: './heat-index-calculator.component.html',
  styleUrls: ['./heat-index-calculator.component.sass']
})
export class HeatIndexCalculatorComponent {
  temperature: number | null = null;
  humidity: number | null = null;
  temperatureUnit: 'C' | 'F' = 'C';
  heatIndex: number | null = null;

  calculateHeatIndex(): void {
    if (this.temperature !== null && this.humidity !== null) {
      if (this.temperatureUnit === 'F') {
        this.heatIndex = this.calculateHeatIndexFahrenheit(this.temperature, this.humidity);
      } else {
        // Convert Celsius to Fahrenheit for calculation
        const tempInFahrenheit = (this.temperature * 9/5) + 32;
        const heatIndexFahrenheit = this.calculateHeatIndexFahrenheit(tempInFahrenheit, this.humidity);
        // Convert back to Celsius if necessary
        this.heatIndex = (heatIndexFahrenheit - 32) * 5/9;
      }
    }
  }

  private calculateHeatIndexFahrenheit(temp: number, humidity: number): number {
    // Heat index calculation formula
    // This is a simplified version and may need to be adjusted according to the specific formula you wish to use
    if (temp < 80) {
      return temp;
    }
    return -42.379 + 2.04901523 * temp + 10.14333127 * humidity
           - 0.22475541 * temp * humidity - 0.00683783 * temp * temp
           - 0.05481717 * humidity * humidity + 0.00122874 * temp * temp * humidity
           + 0.00085282 * temp * humidity * humidity - 0.00000199 * temp * temp * humidity * humidity;
  }
}



--- app/heat-index-calculator/heat-index-calculator.component.html ---
<div class="heat-index-calculator-container">
    <h2>Heat Index Calculator</h2>
    <form>
      <div class="form-group">
        <label for="temperature">Temperature</label>
        <input type="number" id="temperature" [(ngModel)]="temperature" name="temperature" required>
        <select [(ngModel)]="temperatureUnit" name="temperatureUnit">
          <option value="C">Â°C</option>
          <option value="F">Â°F</option>
        </select>
      </div>
      <div class="form-group">
        <label for="humidity">Relative Humidity (%)</label>
        <input type="number" id="humidity" [(ngModel)]="humidity" name="humidity" required>
      </div>
      <button type="button" (click)="calculateHeatIndex()">Calculate</button>
    </form>
    <div *ngIf="heatIndex !== null">
      <h3>Heat Index: {{ heatIndex }} {{ temperatureUnit }}</h3>
    </div>
  </div>
  


--- app/heat-index-calculator/heat-index-calculator.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeatIndexCalculatorComponent } from './heat-index-calculator.component';

describe('HeatIndexCalculatorComponent', () => {
  let component: HeatIndexCalculatorComponent;
  let fixture: ComponentFixture<HeatIndexCalculatorComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [HeatIndexCalculatorComponent]
    })
    .compileComponents();
    
    fixture = TestBed.createComponent(HeatIndexCalculatorComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



--- assets/.gitkeep ---


