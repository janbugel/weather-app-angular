
--- heat-index-calculator.component.sass ---
.heat-index-calculator-container
  display: flex
  justify-content: center
  margin: 20px

.form-style
  display: flex
  flex-direction: column
  gap: 20px

.heat-index-result
  font-size: 20px
  text-align: center
  font-weight: bold


--- heat-index-calculator.component.ts ---
import { Component } from '@angular/core';

@Component({
  selector: 'app-heat-index-calculator',
  templateUrl: './heat-index-calculator.component.html',
  styleUrls: ['./heat-index-calculator.component.sass'],
})
export class HeatIndexCalculatorComponent {
  temperature: number | null = null;
  humidity: number | null = null;
  temperatureUnit: 'C' | 'F' = 'C';
  heatIndex: number | null = null;
  message: string | null = null; // New property to hold messages

  calculateHeatIndex(): void {
    this.heatIndex = null; // Reset heat index for each calculation
    this.message = null; // Reset message for each calculation

    if (this.temperature !== null && this.humidity !== null) {
      if (this.temperatureUnit === 'F') {
        if (this.temperature < 80) {
          this.message = "Heat Index value cannot be calculated for temperatures below 80째F.";
        } else {
          this.heatIndex = this.calculateHeatIndexFahrenheit(
            this.temperature,
            this.humidity
          );
        }
      } else {
        if (this.temperature < 26.7) {
          this.message = "Heat Index value cannot be calculated for temperatures below 26.7째C.";
        } else {
          // Convert Celsius to Fahrenheit for calculation
          const tempInFahrenheit = this.convertCelsiusToFahrenheit(this.temperature);
          this.heatIndex = this.convertFahrenheitToCelsius(
            this.calculateHeatIndexFahrenheit(tempInFahrenheit, this.humidity)
          );
        }
      }
    }
  }

  private calculateHeatIndexFahrenheit(temp: number, humidity: number): number {
    let heatIndex =
      -42.379 +
      2.04901523 * temp +
      10.14333127 * humidity -
      0.22475541 * temp * humidity -
      0.00683783 * temp ** 2 -
      0.05481717 * humidity ** 2 +
      0.00122874 * temp ** 2 * humidity +
      0.00085282 * temp * humidity ** 2 -
      0.00000199 * temp ** 2 * humidity ** 2;
    return Math.round(heatIndex * 10) / 10; // Rounded to one decimal place
  }

  private convertCelsiusToFahrenheit(celsius: number): number {
    return (celsius * 9) / 5 + 32;
  }

  private convertFahrenheitToCelsius(fahrenheit: number): number {
    return ((fahrenheit - 32) * 5) / 9;
  }
}



--- heat-index-calculator.component.html ---
<div class="heat-index-calculator-container">
  <mat-card class="heat-index-card">
    <mat-card-header></mat-card-header>
    <mat-card-content>
      <form (ngSubmit)="calculateHeatIndex()" class="form-style">
        <mat-form-field appearance="fill">
          <mat-label>Temperature</mat-label>
          <input matInput type="number" [(ngModel)]="temperature" name="temperature" required />
        </mat-form-field>
        <mat-form-field appearance="fill">
          <mat-label>Temperature Unit</mat-label>
          <mat-select [(ngModel)]="temperatureUnit" name="temperatureUnit">
            <mat-option value="C">째C</mat-option>
            <mat-option value="F">째F</mat-option>
          </mat-select>
        </mat-form-field>
        <mat-form-field appearance="fill">
          <mat-label>Relative Humidity (%)</mat-label>
          <input matInput type="number" [(ngModel)]="humidity" name="humidity" required />
        </mat-form-field>
        <button mat-raised-button color="primary" type="submit">Calculate</button>
      </form>
    </mat-card-content>
    <mat-card-actions *ngIf="heatIndex !== null">
      <p class="heat-index-result">Heat Index: {{ heatIndex | number : '1.0-1' }} {{ temperatureUnit }}</p>
    </mat-card-actions>
  </mat-card>
</div>
<!-- Separate warning message from the card component -->
<div *ngIf="message" class="warning-message-container">
  <p class="warning-message">{{ message }}</p>
</div>



--- heat-index-calculator.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeatIndexCalculatorComponent } from './heat-index-calculator.component';

describe('HeatIndexCalculatorComponent', () => {
  let component: HeatIndexCalculatorComponent;
  let fixture: ComponentFixture<HeatIndexCalculatorComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [HeatIndexCalculatorComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(HeatIndexCalculatorComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


