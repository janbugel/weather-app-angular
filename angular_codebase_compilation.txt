
--- app.component.html ---
<div class="app-header">
  <h1 class="app-title">London Weather ‚òÄÔ∏èüåßÔ∏è</h1>
  <div class="tabs-container">
    <mat-tab-group class="desktop-tabs">
      <mat-tab label="Weather Table">
        <app-weather-table (pastDaysChanged)="updatePastDays($event)"></app-weather-table>
      </mat-tab>
      <mat-tab label="Temperature Chart">
        <app-temperature-chart [pastDays]="selectedPastDays"></app-temperature-chart>
      </mat-tab>
      <mat-tab label="Heat Index Calculator">
        <app-heat-index-calculator></app-heat-index-calculator>
      </mat-tab>
    </mat-tab-group>
  </div>
</div>
<router-outlet></router-outlet>



--- app-routing.module.ts ---
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { TemperatureChartComponent } from './components/temperature-chart/temperature-chart.component';

const routes: Routes = [
  { path: 'temperature-chart', component: TemperatureChartComponent },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule],
})
export class AppRoutingModule {}



--- app.component.spec.ts ---
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [RouterTestingModule],
      declarations: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'weather-app-angular'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('weather-app-angular');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain(
      'Hello, weather-app-angular'
    );
  });
});



--- app.module.ts ---
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { WeatherTableComponent } from './components/weather-table/weather-table.component';
import { TemperatureChartComponent } from './components/temperature-chart/temperature-chart.component';
import { HeatIndexCalculatorComponent } from './components/heat-index-calculator/heat-index-calculator.component';

import { NgxChartsModule } from '@swimlane/ngx-charts';

import { MatTabsModule } from '@angular/material/tabs';
import { MatTableModule } from '@angular/material/table';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatSortModule } from '@angular/material/sort';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatSelectModule } from '@angular/material/select';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatGridListModule } from '@angular/material/grid-list';
import { MatIconModule } from '@angular/material/icon';
import { MatToolbarModule } from '@angular/material/toolbar';
import { provideAnimationsAsync } from '@angular/platform-browser/animations/async';

@NgModule({
  declarations: [
    AppComponent,
    WeatherTableComponent,
    TemperatureChartComponent,
    HeatIndexCalculatorComponent,
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    HttpClientModule,
    FormsModule,
    ReactiveFormsModule,
    MatTableModule,
    MatPaginatorModule,
    MatSortModule,
    MatInputModule,
    MatFormFieldModule,
    MatSelectModule,
    MatButtonModule,
    MatCardModule,
    MatGridListModule,
    MatIconModule,
    MatToolbarModule,
    MatTabsModule,
    NgxChartsModule,
  ],
  providers: [
    provideAnimationsAsync()
  ],
  bootstrap: [AppComponent],
})
export class AppModule {}



--- app.component.ts ---
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.sass'],
})
export class AppComponent {
  selectedPastDays: number = 7;
  updatePastDays(pastDays: number): void {
    this.selectedPastDays = pastDays;
  }
}



--- app.component.sass ---
.app-header
  text-align: center

.app-title
  font-size: 35px
  margin: 20px 0

.app-container
  display: flex
  flex-direction: column
  align-items: center
  padding: 20px

h1
  color: #1976d2
  margin-bottom: 20px



--- components/weather-table/weather-table.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { WeatherTableComponent } from './weather-table.component';

describe('WeatherTableComponent', () => {
  let component: WeatherTableComponent;
  let fixture: ComponentFixture<WeatherTableComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [WeatherTableComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(WeatherTableComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



--- components/weather-table/weather-table.component.html ---
<div class="weather-table-container">
  <div class="past-days-selector">
    <mat-form-field appearance="fill">
      <mat-label>Past Days</mat-label>
      <input matInput type="number" [(ngModel)]="pastDays" (ngModelChange)="updatePastDays()" min="1" max="92" name="pastDays">
    </mat-form-field>
  </div>
  <!-- Display warning message if pastDays is more than 92 -->
  <div *ngIf="pastDays > 92" class="warning-message">
    Forecast API only stores 92 days of past data.
  </div>
  <table mat-table [dataSource]="dataSource" matSort class="mat-elevation-z8">

    <!-- Datetime Column -->
    <ng-container matColumnDef="datetime">
      <th mat-header-cell *matHeaderCellDef mat-sort-header>Date, Time</th>
      <td mat-cell *matCellDef="let element">{{ element.datetime }}</td>
    </ng-container>

    <!-- Weather State Column -->
    <ng-container matColumnDef="weatherState">
      <th mat-header-cell *matHeaderCellDef mat-sort-header>Weather State</th>
      <td mat-cell *matCellDef="let element">{{ element.weatherState }}</td>
    </ng-container>

    <!-- Temperature Column -->
    <ng-container matColumnDef="temperature">
      <th mat-header-cell *matHeaderCellDef mat-sort-header>Temperature (¬∞C)</th>
      <td mat-cell *matCellDef="let element">{{ element.temperature }}</td>
    </ng-container>

    <!-- Humidity Column -->
    <ng-container matColumnDef="humidity">
      <th mat-header-cell *matHeaderCellDef mat-sort-header>Humidity (%)</th>
      <td mat-cell *matCellDef="let element">{{ element.humidity }}</td>
    </ng-container>

    <!-- Pressure Column -->
    <ng-container matColumnDef="pressure">
      <th mat-header-cell *matHeaderCellDef mat-sort-header>Pressure (hPa)</th>
      <td mat-cell *matCellDef="let element">{{ element.pressure }}</td>
    </ng-container>

    <!-- Table Rows -->
    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
  </table>

  <!-- Paginator -->
  <mat-paginator [pageSizeOptions]="[10, 20, 50]" showFirstLastButtons></mat-paginator>
</div>



--- components/weather-table/weather-table.component.sass ---
.weather-table
  max-width: 100%
  margin: auto
  border-collapse: collapse
  thead
    background-color: #1976d2
    color: white
    th
      padding: 10px
      text-align: left
  tbody tr:nth-child(even)
    background-color: #f2f2f2
  td, th
    padding: 8px
    border: 1px solid #ddd

.weather-table td
  text-align: center
  text-align: center
  font-size: 16px

// aling text on h2 title in the center
.title
  text-align: center
  padding: 10px
  margin: 10px
  font-size: 20px
  font-weight: bold
  // blue color
  color: #1976d2


--- components/weather-table/weather-table.component.ts ---
import { Component, OnInit, ViewChild, AfterViewInit, Output, EventEmitter } from '@angular/core';
import { ForecastService } from '../../services/forecast.service';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';

interface WeatherData {
  datetime: string;
  temperature: number;
  humidity: number;
  pressure: number | string;
  weatherState: string;
}

@Component({
  selector: 'app-weather-table',
  templateUrl: './weather-table.component.html',
  styleUrls: ['./weather-table.component.sass']
})
export class WeatherTableComponent implements OnInit, AfterViewInit {
  displayedColumns: string[] = ['datetime', 'weatherState', 'temperature', 'humidity', 'pressure'];
  dataSource = new MatTableDataSource<WeatherData>();
  pastDays = 7; // Default value for past days

  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;
  @Output() pastDaysChanged = new EventEmitter<number>();

  constructor(private forecastService: ForecastService) {}

  ngOnInit(): void {
    this.loadWeatherData();
  }

  ngAfterViewInit() {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }

  updatePastDays(): void {
    if (this.pastDays > 92) {
      // Do nothing if pastDays is more than 92
      return;
    }

    if (this.pastDays >= 1) {
      this.loadWeatherData();
      this.pastDaysChanged.emit(this.pastDays);
    }
  }

  private loadWeatherData(): void {
    this.forecastService.getWeatherForecast(this.pastDays).subscribe((data) => {
      this.dataSource.data = data.hourly.time.map((time: string, index: number) => {
        const date = new Date(time);
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0'); // +1 because getMonth() returns 0-11
        const year = date.getFullYear().toString();
        const formattedDate = `${day}.${month}.${year}`;
        const formattedTime = date.toLocaleTimeString('it-IT', {
          hour: '2-digit',
          minute: '2-digit',
          hour12: false,
        });

        return {
          datetime: `${formattedDate}, ${formattedTime}`,
          temperature: data.hourly.temperature_2m[index],
          humidity: data.hourly.relative_humidity_2m[index],
          pressure: data.hourly.pressure_msl[index],
          weatherState: this.mapWeatherCodeToState(data.hourly.weather_code[index]),
        };
      });
      this.dataSource.paginator = this.paginator;
      this.dataSource.sort = this.sort;
    });
  }

  private mapWeatherCodeToState(code: number): string {
    switch (code) {
      case 0: return 'Clear sky';
      case 1: return 'Mainly clear';
      case 2: return 'Partly cloudy';
      case 3: return 'Cloudy';
      case 45: return 'Fog';
      case 48: return 'Depositing rime fog';
      case 51: return 'Light drizzle';
      case 53: return 'Moderate drizzle';
      case 55: return 'Dense drizzle';
      case 56: return 'Light freezing drizzle';
      case 57: return 'Dense freezing drizzle';
      case 61: return 'Slight rain';
      case 63: return 'Moderate rain';
      case 65: return 'Heavy rain';
      case 66: return 'Light freezing rain';
      case 67: return 'Heavy freezing rain';
      case 71: return 'Slight snow fall';
      case 73: return 'Moderate snow fall';
      case 75: return 'Heavy snow fall';
      case 77: return 'Snow grains';
      case 80: return 'Slight rain showers';
      case 81: return 'Moderate rain showers';
      case 82: return 'Heavy rain showers';
      case 85: return 'Slight snow showers';
      case 86: return 'Heavy snow showers';
      case 95: return 'Thunderstorm: Slight or moderate';
      case 96: return 'Thunderstorm with light hail';
      case 99: return 'Thunderstorm with heavy hail';
      default: return 'Unknown';
    }
  }
}



--- components/temperature-chart/temperature-chart.component.sass ---
.temperature-chart-container
  width: 100%
  height: 500px
  overflow-x: hidden
  margin-top: 5%



--- components/temperature-chart/temperature-chart.component.ts ---
import { Component, OnInit, Input, SimpleChanges, OnChanges } from '@angular/core';
import { ForecastService } from '../../services/forecast.service';

@Component({
  selector: 'app-temperature-chart',
  templateUrl: './temperature-chart.component.html',
  styleUrls: ['./temperature-chart.component.sass'],
  inputs: ['pastDays'] 
})
export class TemperatureChartComponent implements OnInit, OnChanges {
  @Input() pastDays: number = 7; 
  chartData: any[] = [];

  showXAxis = true;
  showYAxis = true;
  gradient = false;
  showLegend = false;
  showXAxisLabel = true;
  xAxisLabel = 'Time';
  showYAxisLabel = true;
  yAxisLabel = 'Temperature (¬∞C)';
  colorScheme = 'vivid';

  constructor(private forecastService: ForecastService) {}

  ngOnInit(): void {
    this.loadChartData();
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['pastDays']) {
      this.loadChartData();
    }
  }

  private loadChartData(): void {
    this.forecastService.getWeatherForecast(this.pastDays).subscribe(data => {
      this.chartData = [
        {
          name: 'Temperature',
          series: data.hourly.time.map((time: string, index: number) => ({
            name: new Date(time).toLocaleString(),
            value: data.hourly.temperature_2m[index]
          }))
        }
      ];
    });
  }
}



--- components/temperature-chart/temperature-chart.component.html ---
<div class="temperature-chart-container" *ngIf="chartData && chartData.length">
  <ngx-charts-line-chart
    [scheme]="colorScheme"
    [results]="chartData"
    [gradient]="gradient"
    [yAxis]="showYAxis"
    [legend]="showLegend"
    [showXAxisLabel]="showXAxisLabel"
    [showYAxisLabel]="showYAxisLabel"
    [xAxisLabel]="xAxisLabel"
    [yAxisLabel]="yAxisLabel">
  </ngx-charts-line-chart>
</div>



--- components/temperature-chart/temperature-chart.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { TemperatureChartComponent } from './temperature-chart.component';

describe('TemperatureChartComponent', () => {
  let component: TemperatureChartComponent;
  let fixture: ComponentFixture<TemperatureChartComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [TemperatureChartComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(TemperatureChartComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



--- components/heat-index-calculator/heat-index-calculator.component.sass ---
.heat-index-calculator-container
  display: flex
  flex-direction: column
  align-items: center
  margin-top: 50px

.heat-index-card, .history-card
  max-width: 500px
  width: 100%
  margin-bottom: 20px

.form-style
  display: flex
  flex-direction: column
  gap: 20px

.heat-index-result
  font-size: 20px
  text-align: center
  margin-top: 20px

.warning-message-container
  margin-top: 20px
  text-align: center

.warning-message
  color: red
  font-weight: bold

.history-card
  .mat-elevation-z8
    overflow-x: auto



--- components/heat-index-calculator/heat-index-calculator.component.ts ---
import { Component } from '@angular/core';

@Component({
  selector: 'app-heat-index-calculator',
  templateUrl: './heat-index-calculator.component.html',
  styleUrls: ['./heat-index-calculator.component.sass'],
})
export class HeatIndexCalculatorComponent {
  temperature: number | null = null;
  humidity: number | null = null;
  temperatureUnit: 'C' | 'F' = 'C';
  heatIndex: number | null = null;
  message: string | null = null;
  history: { temperature: number; humidity: number; heatIndex: number; unit: string; }[] = [];

  constructor() {
    this.loadHistory();
  }

  calculateHeatIndex(): void {
    this.heatIndex = null;
    this.message = null;

    if (this.temperature !== null && this.humidity !== null) {
      if (this.temperatureUnit === 'F') {
        if (this.temperature < 80) {
          this.message =
            'Heat Index value cannot be calculated for temperatures below 80¬∞F.';
        } else {
          this.heatIndex = this.calculateHeatIndexFahrenheit(
            this.temperature,
            this.humidity
          );
          this.addToHistory();
        }
      } else {
        if (this.temperature < 26.7) {
          this.message =
            'Heat Index value cannot be calculated for temperatures below 26.7¬∞C.';
        } else {
          const tempInFahrenheit = this.convertCelsiusToFahrenheit(this.temperature);
          this.heatIndex = this.convertFahrenheitToCelsius(
            this.calculateHeatIndexFahrenheit(tempInFahrenheit, this.humidity)
          );
          this.addToHistory();
        }
      }
    }
  }

  private calculateHeatIndexFahrenheit(temp: number, humidity: number): number {
    let heatIndex =
      -42.379 +
      2.04901523 * temp +
      10.14333127 * humidity -
      0.22475541 * temp * humidity -
      0.00683783 * temp ** 2 -
      0.05481717 * humidity ** 2 +
      0.00122874 * temp ** 2 * humidity +
      0.00085282 * temp * humidity ** 2 -
      0.00000199 * temp ** 2 * humidity ** 2;
    return Math.round(heatIndex * 10) / 10;
  }

  private convertCelsiusToFahrenheit(celsius: number): number {
    return (celsius * 9) / 5 + 32;
  }

  private convertFahrenheitToCelsius(fahrenheit: number): number {
    return ((fahrenheit - 32) * 5) / 9;
  }

  private addToHistory(): void {
    if (this.heatIndex !== null) {
      this.history.unshift({
        temperature: this.temperature!,
        humidity: this.humidity!,
        heatIndex: this.heatIndex,
        unit: this.temperatureUnit,
      });
      this.history = this.history.slice(0, 5); // Keep only the last 5 entries
      localStorage.setItem('heatIndexHistory', JSON.stringify(this.history));
    }
  }

  private loadHistory(): void {
    const history = localStorage.getItem('heatIndexHistory');
    if (history) {
      this.history = JSON.parse(history);
    }
  }
}



--- components/heat-index-calculator/heat-index-calculator.component.html ---
<div class="heat-index-calculator-container">
  <mat-card class="heat-index-card">
    <mat-card-header>
      <mat-card-title>Heat Index Calculator</mat-card-title>
    </mat-card-header>
    <mat-card-content>
      <form (ngSubmit)="calculateHeatIndex()" class="form-style">
        <mat-form-field appearance="fill">
          <mat-label>Temperature</mat-label>
          <input matInput type="number" [(ngModel)]="temperature" name="temperature" required />
        </mat-form-field>
        <mat-form-field appearance="fill">
          <mat-label>Temperature Unit</mat-label>
          <mat-select [(ngModel)]="temperatureUnit" name="temperatureUnit">
            <mat-option value="C">¬∞C</mat-option>
            <mat-option value="F">¬∞F</mat-option>
          </mat-select>
        </mat-form-field>
        <mat-form-field appearance="fill">
          <mat-label>Relative Humidity (%)</mat-label>
          <input matInput type="number" [(ngModel)]="humidity" name="humidity" required />
        </mat-form-field>
        <button mat-raised-button color="primary" type="submit">Calculate</button>
      </form>
    </mat-card-content>
    <mat-card-actions *ngIf="heatIndex !== null">
      <p class="heat-index-result">
        Heat Index: {{ heatIndex | number:'1.0-1' }} {{ temperatureUnit }}
      </p>
    </mat-card-actions>
  </mat-card>
  <!-- Display of Calculation History -->
  <mat-card class="history-card" *ngIf="history.length">
    <mat-card-header>
      <mat-card-title>Calculation History</mat-card-title>
    </mat-card-header>
    <mat-card-content>
      <table mat-table [dataSource]="history" class="mat-elevation-z8">
        <ng-container matColumnDef="temperature">
          <th mat-header-cell *matHeaderCellDef>Temperature</th>
          <td mat-cell *matCellDef="let element">{{ element.temperature | number:'1.0-1' }} {{ element.unit }}</td>
        </ng-container>
        <ng-container matColumnDef="humidity">
          <th mat-header-cell *matHeaderCellDef>Humidity</th>
          <td mat-cell *matCellDef="let element">{{ element.humidity | number:'1.0-1' }}%</td>
        </ng-container>
        <ng-container matColumnDef="heatIndex">
          <th mat-header-cell *matHeaderCellDef>Heat Index</th>
          <td mat-cell *matCellDef="let element">{{ element.heatIndex | number:'1.0-1' }} {{ element.unit }}</td>
        </ng-container>
        <tr mat-header-row *matHeaderRowDef="['temperature', 'humidity', 'heatIndex']"></tr>
        <tr mat-row *matRowDef="let row; columns: ['temperature', 'humidity', 'heatIndex'];"></tr>
      </table>
    </mat-card-content>
  </mat-card>
</div>



--- components/heat-index-calculator/heat-index-calculator.component.spec.ts ---
import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HeatIndexCalculatorComponent } from './heat-index-calculator.component';

describe('HeatIndexCalculatorComponent', () => {
  let component: HeatIndexCalculatorComponent;
  let fixture: ComponentFixture<HeatIndexCalculatorComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [HeatIndexCalculatorComponent],
    }).compileComponents();

    fixture = TestBed.createComponent(HeatIndexCalculatorComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});



--- services/forecast.service.ts ---
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class ForecastService {
  private baseUrl = 'https://api.open-meteo.com/v1/forecast';

  constructor(private http: HttpClient) {}

  getWeatherForecast(pastDays: number): Observable<any> {
    const params = {
      latitude: 51.5074, // London's latitude
      longitude: -0.1278, // London's longitude
      hourly: 'temperature_2m,relative_humidity_2m,pressure_msl,weather_code',
      past_days: pastDays
    };
    return this.http.get(this.baseUrl, { params });
  }
}



--- services/forecast.service.spec.ts ---
import { TestBed } from '@angular/core/testing';

import { ForecastService } from './forecast.service';

describe('ForecastService', () => {
  let service: ForecastService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(ForecastService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});


