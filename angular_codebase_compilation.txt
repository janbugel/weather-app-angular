
--- index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>weather app</title>
    <base href="/" />

    <meta name="viewport" content="width=device-width, initial-scale=1" />
    
    <link
      href="https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap"
      rel="stylesheet"
    />

    
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css"
    />
      <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
</head>
  <body class="mat-typography">
    <app-root></app-root>
  </body>
</html>



--- main.ts ---
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';

platformBrowserDynamic()
  .bootstrapModule(AppModule)
  .catch((err) => console.error(err));



--- styles.sass ---
.app-toolbar
  display: flex
  align-items: center
  justify-content: space-between
  .logo-container .sun-emoji
    font-size: 24px
    margin-right: 20px
  .spacer
    flex: 1
  .tabs-container .menu-icon
    margin-right: 16px
    background: none
    border: none
    display: none
  @media (max-width: 768px)
    .desktop-tabs
      display: none
    .menu-icon
      display: inline



--- app/app.component.html ---
<mat-toolbar class="toolbar" color="primary">
  <span>London Weather ‚òÄÔ∏èüåßÔ∏è</span>
  <span class="spacer"></span>
  <!-- Desktop Navigation -->
  <div class="desktop-menu">
    <button mat-button [matMenuTriggerFor]="weatherMenu">Weather Table</button>
    <mat-menu #weatherMenu="matMenu">
      <button mat-menu-item (click)="selectedComponent = 'weather-table'">Forecast</button>
      <button mat-menu-item (click)="selectedComponent = 'weather-historical'">Historical</button>
    </mat-menu>
    <button mat-button (click)="selectedComponent = 'temperature-chart'">Temperature Charts</button>
    <button mat-button (click)="selectedComponent = 'heat-index-calculator'">Heat Index Calculator</button>
  </div>
  <!-- Mobile Menu Trigger -->
  <button mat-button [matMenuTriggerFor]="appMenu" class="mobile-menu">Menu</button>
  <mat-menu #appMenu="matMenu">
    <button mat-menu-item (click)="selectedComponent = 'weather-table'">Forecast Weather Table</button>
    <button mat-menu-item (click)="selectedComponent = 'weather-historical'">Historical Weather Table</button>
    <button mat-menu-item (click)="selectedComponent = 'temperature-chart'">Temperature Charts</button>
    <button mat-menu-item (click)="selectedComponent = 'heat-index-calculator'">Heat Index Calculator</button>
  </mat-menu>
</mat-toolbar>
<div class="content">
  <app-weather-table-forecast *ngIf="selectedComponent === 'weather-table'"></app-weather-table-forecast>
  <app-weather-table-historical *ngIf="selectedComponent === 'weather-historical'"></app-weather-table-historical>
  <app-temperature-chart *ngIf="selectedComponent === 'temperature-chart'"></app-temperature-chart>
  <app-heat-index-calculator *ngIf="selectedComponent === 'heat-index-calculator'"></app-heat-index-calculator>
</div>



--- app/app-routing.module.ts ---
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

// Lazy loading feature modules
const routes: Routes = [
  {
    path: 'weather-table',
    loadChildren: () =>
      import(
        './components/weather-table-forecast/weather-table-forecast.module'
      ).then((m) => m.WeatherTableForecastModule),
  },
  {
    path: 'temperature-chart',
    loadChildren: () =>
      import('./components/temperature-chart/temperature-chart.module').then(
        (m) => m.TemperatureChartModule
      ),
  },
  {
    path: 'heat-index-calculator',
    loadChildren: () =>
      import(
        './components/heat-index-calculator/heat-index-calculator.module'
      ).then((m) => m.HeatIndexCalculatorModule),
  },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule],
})
export class AppRoutingModule {}



--- app/app.module.ts ---
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatButtonModule } from '@angular/material/button';
import { MatMenuModule } from '@angular/material/menu';
import { WeatherTableForecastModule } from './components/weather-table-forecast/weather-table-forecast.module'; 
import { TemperatureChartModule } from './components/temperature-chart/temperature-chart.module'; 
import { HeatIndexCalculatorModule } from './components/heat-index-calculator/heat-index-calculator.module';
import { WeatherTableHistoricalModule } from './components/weather-table-historical/weather-table-historical.module';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    HttpClientModule,
    MatToolbarModule,
    MatButtonModule,
    MatMenuModule,
    WeatherTableForecastModule,
    TemperatureChartModule,
    HeatIndexCalculatorModule,
    WeatherTableHistoricalModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}




--- app/app.component.ts ---
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.sass']
})
export class AppComponent {
  selectedComponent: 'weather-table' | 'temperature-chart' | 'heat-index-calculator' | 'weather-historical' = 'weather-table';
}



--- app/app.component.sass ---
.toolbar
  position: absolute
  top: 0
  left: 0
  right: 0
  padding: 0 20px  
  width: 100%
  
.spacer
  flex: 1 1 auto

.content
  margin: 20px
  padding-top: 64px

.desktop-menu
  display: none
  @media (min-width: 755px)
    display: flex
    gap: 20px

.mobile-menu
  @media (min-width: 755px)
    display: none

.table-tabs
  margin-top: 64px


--- app/utils/transform-weather-data.ts ---
import { formatDate } from './format-date';
import { mapWeatherCodeToState } from './map-weather-code';

export function transformWeatherData(data: any): any[] {
  return data.hourly.time.map((time: string, index: number) => {
    return {
      datetime: formatDate(time),
      temperature: data.hourly.temperature_2m[index],
      humidity: data.hourly.relative_humidity_2m[index],
      pressure: data.hourly.pressure_msl[index],
      weatherState: mapWeatherCodeToState(data.hourly.weather_code[index]),
    };
  });
}



--- app/utils/chart-appearance.ts ---
import { ChartConfiguration, ChartEvent, ActiveElement, Chart } from 'chart.js';

export function getTemperatureChartAppearance(
  labels: string[],
  temperatures: number[],
  chartLabel: string
): ChartConfiguration<'line', number[], string> {
  return {
    type: 'line',
    data: {
      labels: labels,
      datasets: [
        {
          label: chartLabel,
          backgroundColor: 'rgb(96, 111, 199)',
          borderColor: 'rgb(96, 111, 199)',
          data: temperatures,
          fill: false,
          pointRadius: 0,
        },
      ],
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      interaction: {
        mode: 'nearest',
        intersect: false,
        axis: 'x',
      },
      plugins: {
        tooltip: {
          position: 'nearest',
        },
        legend: {
          display: true,
        },
      },
      scales: {
        y: {
          beginAtZero: false,
        },
        x: {
          grid: {
            drawOnChartArea: false,
          },
        },
      },
      elements: {
        line: {
          borderWidth: 2.5,
        },
        point: {
          radius: 5, // dot size
          hoverRadius: 5, // dot size on hover
        },
      },
      onHover: (
        event: ChartEvent,
        chartElements: ActiveElement[],
        chart: Chart
      ) => {
        if (chartElements.length) {
          const x = chartElements[0].element.x;
          const yAxis = chart.scales['y'];
          chart.ctx.save();
          chart.ctx.beginPath();
          chart.ctx.moveTo(x, yAxis.top);
          chart.ctx.lineTo(x, yAxis.bottom);
          chart.ctx.lineWidth = 2; // line width
          chart.ctx.strokeStyle = 'rgba(96, 111, 199, 0.5)';
          chart.ctx.stroke();
          chart.ctx.restore();
        }
      },
    },
  };
}



--- app/utils/format-date.ts ---
export function formatDate(dateTimeString: string): string {
  const date = new Date(dateTimeString);
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const year = date.getFullYear().toString();
  const formattedDate = `${day}.${month}.${year}`;
  const formattedTime = date.toLocaleTimeString('it-IT', {
    hour: '2-digit',
    minute: '2-digit',
    hour12: false,
  });
  return `${formattedDate}, ${formattedTime}`;
}
export function formatDateForAPI(date: Date): string {
  const year = date.getFullYear().toString();
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const day = date.getDate().toString().padStart(2, '0');
  return `${year}-${month}-${day}`;
}



--- app/utils/temperature-conversions.ts ---
export function convertCelsiusToFahrenheit(celsius: number): number {
  return (celsius * 9) / 5 + 32;
}

export function convertFahrenheitToCelsius(fahrenheit: number): number {
  return ((fahrenheit - 32) * 5) / 9;
}



--- app/utils/heat-index-history.ts ---
import { MatTableDataSource } from '@angular/material/table';
import { calculateHeatIndexFahrenheit } from './calculate-heat-index';
import {
  convertCelsiusToFahrenheit,
  convertFahrenheitToCelsius,
} from './temperature-conversions';

export interface HeatIndexRecord {
  temperature: number;
  humidity: number;
  heatIndex: number;
  unit: 'C' | 'F';
}

export class HeatIndexHistory {
  private static readonly MAX_HISTORY_LENGTH = 5;
  private static readonly STORAGE_KEY = 'heatIndexHistory';

  static loadHistory(): MatTableDataSource<HeatIndexRecord> {
    const storedHistory = localStorage.getItem(HeatIndexHistory.STORAGE_KEY);
    const historyData: HeatIndexRecord[] = storedHistory
      ? JSON.parse(storedHistory)
      : [];
    return new MatTableDataSource<HeatIndexRecord>(historyData);
  }

  static saveRecord(
    temperature: number,
    humidity: number,
    unit: 'C' | 'F',
    heatIndex: number | null
  ): void {
    if (heatIndex === null) return;

    let historyData: HeatIndexRecord[] = HeatIndexHistory.loadHistory().data;

    historyData.unshift({ temperature, humidity, heatIndex, unit });
    historyData = historyData.slice(0, HeatIndexHistory.MAX_HISTORY_LENGTH);

    localStorage.setItem(
      HeatIndexHistory.STORAGE_KEY,
      JSON.stringify(historyData)
    );
  }
}



--- app/utils/map-weather-code.ts ---
export function mapWeatherCodeToState(code: number): string {
  switch (code) {
    case 0: return 'Clear sky';
    case 1: return 'Mainly clear';
    case 2: return 'Partly cloudy';
    case 3: return 'Cloudy';
    case 45: return 'Fog';
    case 48: return 'Depositing rime fog';
    case 51: return 'Light drizzle';
    case 53: return 'Moderate drizzle';
    case 55: return 'Dense drizzle';
    case 56: return 'Light freezing drizzle';
    case 57: return 'Dense freezing drizzle';
    case 61: return 'Slight rain';
    case 63: return 'Moderate rain';
    case 65: return 'Heavy rain';
    case 66: return 'Light freezing rain';
    case 67: return 'Heavy freezing rain';
    case 71: return 'Slight snow fall';
    case 73: return 'Moderate snow fall';
    case 75: return 'Heavy snow fall';
    case 77: return 'Snow grains';
    case 80: return 'Slight rain showers';
    case 81: return 'Moderate rain showers';
    case 82: return 'Heavy rain showers';
    case 85: return 'Slight snow showers';
    case 86: return 'Heavy snow showers';
    case 95: return 'Thunderstorm: Slight or moderate';
    case 96: return 'Thunderstorm with light hail';
    case 99: return 'Thunderstorm with heavy hail';
    default: return 'Unknown';
  }
}


--- app/utils/calculate-heat-index.ts ---
export function calculateHeatIndexFahrenheit(
  temp: number,
  humidity: number
): number {
  if (humidity < 40) return temp;

  let heatIndex =
    -42.379 +
    2.04901523 * temp +
    10.14333127 * humidity -
    0.22475541 * temp * humidity -
    0.00683783 * temp ** 2 -
    0.05481717 * humidity ** 2 +
    0.00122874 * temp ** 2 * humidity +
    0.00085282 * temp * humidity ** 2 -
    0.00000199 * temp ** 2 * humidity ** 2;

  if (temp < 80) {
    heatIndex = temp;
  }

  return Math.round(heatIndex * 10) / 10;
}



--- app/utils/table-formatting.ts ---
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';

export interface TableFormattingOptions<T> {
  dataSource: MatTableDataSource<T>;
  paginator: MatPaginator;
  pageIndexKey: string;
  pageSizeKey: string;
}

export function setTablePagination<T>({
  dataSource,
  paginator,
  pageIndexKey,
  pageSizeKey,
}: TableFormattingOptions<T>): void {
  const pageIndex = parseInt(localStorage.getItem(pageIndexKey) || '0');
  const pageSize = parseInt(localStorage.getItem(pageSizeKey) || '10');

  paginator.pageIndex = pageIndex;
  paginator.pageSize = pageSize;

  paginator.page.subscribe((event) => {
    localStorage.setItem(pageIndexKey, event.pageIndex.toString());
    localStorage.setItem(pageSizeKey, event.pageSize.toString());
    dataSource.paginator = paginator;
  });

  dataSource.paginator = paginator;
}



--- app/components/temperature-chart/temperature-chart.component.sass ---
.temperature-chart-container
  margin-bottom: 50px
  canvas
    height: 400px



--- app/components/temperature-chart/temperature-chart.component.ts ---
import { Component, ViewChild, AfterViewInit, ElementRef } from '@angular/core';
import { Chart, registerables } from 'chart.js';
import { WeatherApiService } from '../../services/weather-api.service';
import { formatDateForAPI } from '../../utils/format-date';
import { getTemperatureChartAppearance } from '../../utils/chart-appearance';

@Component({
  selector: 'app-temperature-chart',
  templateUrl: './temperature-chart.component.html',
  styleUrls: ['./temperature-chart.component.sass'],
})
export class TemperatureChartComponent implements AfterViewInit {
  @ViewChild('temperatureChart')
  temperatureChart!: ElementRef<HTMLCanvasElement>;
  @ViewChild('historicalTemperatureChart')
  historicalTemperatureChart!: ElementRef<HTMLCanvasElement>;
  private pastDays: number;
  private chart?: Chart;
  private historicalChart?: Chart;

  constructor(private forecastService: WeatherApiService) {
    Chart.register(...registerables);
    this.pastDays = parseInt(localStorage.getItem('pastDays') || '7');
  }

  ngAfterViewInit(): void {
    this.loadForecastChart();
    this.loadHistoricalChart();
  }

  private loadForecastChart(): void {
    this.forecastService.getWeatherForecast(this.pastDays).subscribe((data) => {
      const labels = this.generateLabels(data.hourly.time);
      const temperatures = data.hourly.temperature_2m;
      this.createChart(
        this.temperatureChart.nativeElement,
        labels,
        temperatures,
        'Temperature ¬∞C - Forecast'
      );
    });
  }

  private loadHistoricalChart(): void {
    const startDate =
      localStorage.getItem('historicalStartDate') ||
      new Date().toISOString().split('T')[0];
    const endDate =
      localStorage.getItem('historicalEndDate') ||
      new Date().toISOString().split('T')[0];
    this.forecastService
      .getHistoricalWeather(
        formatDateForAPI(new Date(startDate)),
        formatDateForAPI(new Date(endDate))
      )
      .subscribe((data) => {
        const labels = this.generateLabels(data.hourly.time);
        const temperatures = data.hourly.temperature_2m;
        this.createChart(
          this.historicalTemperatureChart.nativeElement,
          labels,
          temperatures,
          'Temperature ¬∞C - Historical'
        );
      });
  }

  private createChart(
    canvas: HTMLCanvasElement,
    labels: string[],
    temperatures: number[],
    label: string
  ): void {
    const ctx = canvas.getContext('2d');
    if (ctx) {
      const chartAppearance = getTemperatureChartAppearance(
        labels,
        temperatures,
        label
      );
      new Chart(ctx, chartAppearance);
    }
  }

  private generateLabels(times: string[]): string[] {
    return times.map((datetime: string) => {
      const date = new Date(datetime);
      return `${date.getDate()}/${
        date.getMonth() + 1
      }/${date.getFullYear()} ${date.getHours()}:00`;
    });
  }
}



--- app/components/temperature-chart/temperature-chart.component.html ---
<div class="temperature-chart-container">
  <canvas #temperatureChart></canvas>
</div>
<div class="temperature-chart-container">
  <canvas #historicalTemperatureChart></canvas>
</div>



--- app/components/temperature-chart/temperature-chart.module.ts ---
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { TemperatureChartComponent } from './temperature-chart.component';

@NgModule({
  declarations: [TemperatureChartComponent],
  imports: [CommonModule],
  exports: [TemperatureChartComponent],
})
export class TemperatureChartModule {}



--- app/components/heat-index-calculator/heat-index-calculator.module.ts ---
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatTableModule } from '@angular/material/table';

import { HeatIndexCalculatorComponent } from './heat-index-calculator.component';

@NgModule({
  declarations: [HeatIndexCalculatorComponent],
  imports: [
    CommonModule,
    FormsModule,
    MatButtonModule,
    MatCardModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatTableModule,
  ],
  exports: [HeatIndexCalculatorComponent],
})
export class HeatIndexCalculatorModule {}



--- app/components/heat-index-calculator/heat-index-calculator.component.sass ---
.heat-index-calculator-container
  display: flex
  flex-direction: column
  align-items: center
  margin-top: 50px

.heat-index-card, .history-card
  max-width: 500px
  width: 100%
  margin-bottom: 20px

.form-style
  display: flex
  flex-direction: column
  gap: 20px

.heat-index-result
  font-size: 20px
  text-align: center
  margin-top: 20px

.warning-message-container
  margin-top: 20px
  text-align: center

.warning-message
  color: red

.history-card
  .mat-elevation-z8
    overflow-x: auto



--- app/components/heat-index-calculator/heat-index-calculator.component.ts ---
import { Component } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { convertFahrenheitToCelsius, convertCelsiusToFahrenheit } from '../../utils/temperature-conversions';
import { calculateHeatIndexFahrenheit } from '../../utils/calculate-heat-index';
import { HeatIndexHistory, HeatIndexRecord } from '../../utils/heat-index-history';

@Component({
  selector: 'app-heat-index-calculator',
  templateUrl: './heat-index-calculator.component.html',
  styleUrls: ['./heat-index-calculator.component.sass'],
})
export class HeatIndexCalculatorComponent {
  temperature: number | null = null;
  humidity: number | null = null;
  temperatureUnit: 'C' | 'F' = 'C';
  heatIndex: number | null = null;
  message: string | null = null;
  history: MatTableDataSource<HeatIndexRecord>;

  constructor() {
    this.history = HeatIndexHistory.loadHistory();
  }

  calculateHeatIndex(): void {
    this.heatIndex = null;
    this.message = null;

    if (this.temperature !== null && this.humidity !== null) {
      let tempInFahrenheit = this.temperatureUnit === 'C' ? convertCelsiusToFahrenheit(this.temperature) : this.temperature;

      if (tempInFahrenheit < 80) {
        this.message = 'Heat Index value cannot be calculated for temperatures below 26.7¬∞C (80¬∞F).';
        return;
      }

      let heatIndexFahrenheit = calculateHeatIndexFahrenheit(tempInFahrenheit, this.humidity);
      this.heatIndex = this.temperatureUnit === 'C' ? convertFahrenheitToCelsius(heatIndexFahrenheit) : heatIndexFahrenheit;

      HeatIndexHistory.saveRecord(this.temperature, this.humidity, this.temperatureUnit, this.heatIndex);
      this.history = HeatIndexHistory.loadHistory();
    }
  }
}


--- app/components/heat-index-calculator/heat-index-calculator.component.html ---
<div class="heat-index-calculator-container">
  <mat-card class="heat-index-card">
    <mat-card-header>
      <mat-card-title>Heat Index Calculator</mat-card-title>
    </mat-card-header>
    <mat-card-content>
      <form (ngSubmit)="calculateHeatIndex()" class="form-style">
        <mat-form-field appearance="fill">
          <mat-label>Temperature</mat-label>
          <input matInput type="number" [(ngModel)]="temperature" name="temperature" required />
        </mat-form-field>
        <mat-form-field appearance="fill">
          <mat-label>Temperature Unit</mat-label>
          <mat-select [(ngModel)]="temperatureUnit" name="temperatureUnit">
            <mat-option value="C">¬∞C</mat-option>
            <mat-option value="F">¬∞F</mat-option>
          </mat-select>
        </mat-form-field>
        <mat-form-field appearance="fill">
          <mat-label>Relative Humidity (%)</mat-label>
          <input matInput type="number" [(ngModel)]="humidity" name="humidity" required />
        </mat-form-field>
        <button mat-raised-button color="primary" type="submit">Calculate</button>
      </form>
      <!-- Error Message Display -->
      <div *ngIf="message" class="warning-message-container">
        <p class="warning-message">{{ message }}</p>
      </div>
    </mat-card-content>
    <mat-card-actions *ngIf="heatIndex !== null">
      <p class="heat-index-result">
        Heat Index: {{ heatIndex | number:'1.0-1' }} {{ temperatureUnit }}
      </p>
    </mat-card-actions>
  </mat-card>
  <!-- Display of Calculation History -->
  <mat-card class="history-card" *ngIf="history.data.length">
    <mat-card-header>
      <mat-card-title>Calculation History</mat-card-title>
    </mat-card-header>
    <mat-card-content>
      <table mat-table [dataSource]="history" class="mat-elevation-z8">
        <ng-container matColumnDef="temperature">
          <th mat-header-cell *matHeaderCellDef>Temperature</th>
          <td mat-cell *matCellDef="let element">{{ element.temperature | number:'1.0-1' }} {{ element.unit }}</td>
        </ng-container>
        <ng-container matColumnDef="humidity">
          <th mat-header-cell *matHeaderCellDef>Humidity</th>
          <td mat-cell *matCellDef="let element">{{ element.humidity | number:'1.0-1' }}%</td>
        </ng-container>
        <ng-container matColumnDef="heatIndex">
          <th mat-header-cell *matHeaderCellDef>Heat Index</th>
          <td mat-cell *matCellDef="let element">{{ element.heatIndex | number:'1.0-1' }} {{ element.unit }}</td>
        </ng-container>
        <tr mat-header-row *matHeaderRowDef="['temperature', 'humidity', 'heatIndex']"></tr>
        <tr mat-row *matRowDef="let row; columns: ['temperature', 'humidity', 'heatIndex'];"></tr>
      </table>
    </mat-card-content>
  </mat-card>
</div>


--- app/components/weather-table-forecast/weather-table-forecast.component.sass ---
.weather-table-container
  display: block
  overflow-x: auto
  width: 100%
  margin-top: 10px

  table
    width: 100%
    table-layout: fixed 

    th, td
      overflow: hidden
      text-overflow: ellipsis
      white-space: normal
      word-wrap: break-word

.warning-message
  color: red 
  display: flex
  justify-content: center
  align-items: center

.past-days-selector
  display: flex
  justify-content: center
  align-items: center


--- app/components/weather-table-forecast/weather-table-forecast.module.ts ---
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatTableModule } from '@angular/material/table';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatSortModule } from '@angular/material/sort';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { FormsModule } from '@angular/forms';

import { WeatherTableForecastComponent } from './weather-table-forecast.component';

@NgModule({
  declarations: [WeatherTableForecastComponent],
  imports: [
    CommonModule,
    MatTableModule,
    MatPaginatorModule,
    MatSortModule,
    MatInputModule,
    MatFormFieldModule,
    FormsModule,
  ],
  exports: [WeatherTableForecastComponent],
})
export class WeatherTableForecastModule {}



--- app/components/weather-table-forecast/weather-table-forecast.component.html ---
<div class="weather-table-container">
  <h2>Weather Forecast</h2>
  <div class="past-days-selector">
    <mat-form-field appearance="fill">
      <mat-label>Past Days</mat-label>
      <input
        matInput
        type="number"
        [(ngModel)]="pastDays"
        (ngModelChange)="updatePastDays()"
        min="1"
        max="92"
        name="pastDays"
      />
    </mat-form-field>
  </div>
  <div *ngIf="pastDays > 92" class="warning-message">
    Forecast API only stores 92 days of past data.
  </div>
  <table mat-table [dataSource]="dataSource" matSort class="mat-elevation-z8">
    <ng-container matColumnDef="datetime">
      <th mat-header-cell *matHeaderCellDef mat-sort-header>Date, Time</th>
      <td mat-cell *matCellDef="let element">{{ element.datetime }}</td>
    </ng-container>

    <ng-container matColumnDef="weatherState">
      <th mat-header-cell *matHeaderCellDef mat-sort-header>Weather State</th>
      <td mat-cell *matCellDef="let element">{{ element.weatherState }}</td>
    </ng-container>

    <ng-container matColumnDef="temperature">
      <th mat-header-cell *matHeaderCellDef mat-sort-header>
        Temperature (¬∞C)
      </th>
      <td mat-cell *matCellDef="let element">{{ element.temperature }}</td>
    </ng-container>

    <ng-container matColumnDef="humidity">
      <th mat-header-cell *matHeaderCellDef mat-sort-header>Humidity (%)</th>
      <td mat-cell *matCellDef="let element">{{ element.humidity }}</td>
    </ng-container>

    <ng-container matColumnDef="pressure">
      <th mat-header-cell *matHeaderCellDef mat-sort-header>Pressure (hPa)</th>
      <td mat-cell *matCellDef="let element">{{ element.pressure }}</td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
  </table>

  <mat-paginator
    [pageSizeOptions]="[10, 15, 20, 30, 50]"
    showFirstLastButtons
  ></mat-paginator>
</div>


--- app/components/weather-table-forecast/weather-table-forecast.component.ts ---
import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';
import { WeatherApiService } from '../../services/weather-api.service';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import { transformWeatherData } from '../../utils/transform-weather-data';
import { setTablePagination } from '../../utils/table-formatting';

interface WeatherData {
  datetime: string;
  temperature: number;
  humidity: number;
  pressure: number | string;
  weatherState: string;
}

@Component({
  selector: 'app-weather-table-forecast',
  templateUrl: './weather-table-forecast.component.html',
  styleUrls: ['./weather-table-forecast.component.sass'],
})
export class WeatherTableForecastComponent implements OnInit, AfterViewInit {
  displayedColumns: string[] = [
    'datetime',
    'weatherState',
    'temperature',
    'humidity',
    'pressure',
  ];
  dataSource = new MatTableDataSource<WeatherData>();

  pastDays = parseInt(localStorage.getItem('pastDays') || '7');

  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;

  constructor(private forecastService: WeatherApiService) {}

  ngOnInit(): void {
    this.loadWeatherData();
  }

  ngAfterViewInit() {
    this.dataSource.sort = this.sort;
    setTablePagination({
      dataSource: this.dataSource,
      paginator: this.paginator,
      pageIndexKey: 'weatherPaginationPageIndex',
      pageSizeKey: 'weatherPaginationPageSize',
    });
  }

  private loadWeatherData(): void {
    this.forecastService.getWeatherForecast(this.pastDays).subscribe((data) => {
      this.dataSource.data = transformWeatherData(data);
      this.dataSource.sort = this.sort;
    });
  }

  updatePastDays(): void {
    if (this.pastDays > 92) {
      return;
    }

    if (this.pastDays >= 1) {
      this.loadWeatherData();
      localStorage.setItem('pastDays', this.pastDays.toString());
    }
  }
}


--- app/components/weather-table-historical/weather-table-historical.module.ts ---
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatTableModule } from '@angular/material/table';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatSortModule } from '@angular/material/sort';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatNativeDateModule } from '@angular/material/core';
import { WeatherTableHistoricalComponent } from './weather-table-historical.component';

@NgModule({
  declarations: [WeatherTableHistoricalComponent],
  imports: [
    CommonModule,
    FormsModule,
    MatTableModule,
    MatPaginatorModule,
    MatSortModule,
    MatDatepickerModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatNativeDateModule
  ],
  exports: [WeatherTableHistoricalComponent],
})
export class WeatherTableHistoricalModule {}


--- app/components/weather-table-historical/weather-table-historical.component.ts ---
import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';
import { WeatherApiService } from '../../services/weather-api.service';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import { transformWeatherData } from '../../utils/transform-weather-data';
import { setTablePagination } from '../../utils/table-formatting';
import { formatDateForAPI } from '../../utils/format-date';

interface WeatherData {
  datetime: string;
  temperature: number;
  humidity: number;
  pressure: number | string;
  weatherState: string;
}

@Component({
  selector: 'app-weather-table-historical',
  templateUrl: './weather-table-historical.component.html',
  styleUrls: ['./weather-table-historical.component.sass']
})
export class WeatherTableHistoricalComponent implements OnInit, AfterViewInit {
  displayedColumns: string[] = ['datetime', 'weatherState', 'temperature', 'humidity', 'pressure'];
  dataSource = new MatTableDataSource<WeatherData>();

  startDate: string; 
  endDate: string; 

  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;

  constructor(private weatherService: WeatherApiService) {
    const today = formatDateForAPI(new Date());
    this.startDate = localStorage.getItem('historicalStartDate') || today;
    this.endDate = localStorage.getItem('historicalEndDate') || today;
  }

  ngOnInit(): void {}

  ngAfterViewInit() {
    this.loadHistoricalData(); 
    setTablePagination({
      dataSource: this.dataSource,
      paginator: this.paginator,
      pageIndexKey: 'weatherPaginationPageIndex',
      pageSizeKey: 'weatherPaginationPageSize',
    });
  }

  loadHistoricalData(): void {
    localStorage.setItem('historicalStartDate', this.startDate);
    localStorage.setItem('historicalEndDate', this.endDate);
    
    const formattedStartDate = formatDateForAPI(new Date(this.startDate));
    const formattedEndDate = formatDateForAPI(new Date(this.endDate));
    
    this.weatherService.getHistoricalWeather(formattedStartDate, formattedEndDate).subscribe(data => {
      this.dataSource.data = transformWeatherData(data);
      this.dataSource.sort = this.sort;
      
      setTablePagination({
        dataSource: this.dataSource,
        paginator: this.paginator,
        pageIndexKey: 'weatherPaginationPageIndex',
        pageSizeKey: 'weatherPaginationPageSize',
      });
    });
  }
}


--- app/components/weather-table-historical/weather-table-historical.component.sass ---
.weather-table-container
  display: block
  overflow-x: auto
  width: 100%
  margin-top: 10px

  table
    width: 100%
    table-layout: fixed 

    th, td
      overflow: hidden
      text-overflow: ellipsis
      white-space: normal
      word-wrap: break-word

.warning-message
  color: red 
  display: flex
  justify-content: center
  align-items: center

.past-days-selector
  display: flex
  justify-content: center
  align-items: center


--- app/components/weather-table-historical/weather-table-historical.component.html ---
<div class="weather-table-container">
  <h2>Historical Weather</h2>
    <div class="date-range-selector">
      <mat-form-field appearance="fill">
        <mat-label>Start Date</mat-label>
        <input matInput [matDatepicker]="pickerStartDate" [(ngModel)]="startDate">
        <mat-datepicker-toggle matSuffix [for]="pickerStartDate"></mat-datepicker-toggle>
        <mat-datepicker #pickerStartDate></mat-datepicker>
      </mat-form-field>
  
      <mat-form-field appearance="fill">
        <mat-label>End Date</mat-label>
        <input matInput [matDatepicker]="pickerEndDate" [(ngModel)]="endDate">
        <mat-datepicker-toggle matSuffix [for]="pickerEndDate"></mat-datepicker-toggle>
        <mat-datepicker #pickerEndDate></mat-datepicker>
      </mat-form-field>
  
      <button mat-raised-button color="primary" (click)="loadHistoricalData()">Load Data</button>
    </div>
    
    <table mat-table [dataSource]="dataSource" matSort class="mat-elevation-z8">
        <ng-container matColumnDef="weatherState">
            <th mat-header-cell *matHeaderCellDef mat-sort-header>Weather State</th>
            <td mat-cell *matCellDef="let element">{{element.weatherState}}</td>
          </ng-container>
      <ng-container matColumnDef="datetime">
        <th mat-header-cell *matHeaderCellDef mat-sort-header>Date, Time</th>
        <td mat-cell *matCellDef="let element">{{element.datetime}}</td>
      </ng-container>
      <ng-container matColumnDef="temperature">
        <th mat-header-cell *matHeaderCellDef mat-sort-header>Temperature (¬∞C)</th>
        <td mat-cell *matCellDef="let element">{{element.temperature}}</td>
      </ng-container>
      <ng-container matColumnDef="humidity">
        <th mat-header-cell *matHeaderCellDef mat-sort-header>Humidity (%)</th>
        <td mat-cell *matCellDef="let element">{{element.humidity}}</td>
      </ng-container>
      <ng-container matColumnDef="pressure">
        <th mat-header-cell *matHeaderCellDef mat-sort-header>Pressure (hPa)</th>
        <td mat-cell *matCellDef="let element">{{element.pressure}}</td>
      </ng-container>

  
      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
    </table>
  
    <!-- Paginator setup to match the forecast component -->
    <mat-paginator
      [pageSizeOptions]="[10, 15, 20, 30, 50]"
      showFirstLastButtons
    ></mat-paginator>
  </div>


--- app/services/weather-api.service.ts ---
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { mapWeatherCodeToState } from '../utils/map-weather-code';

@Injectable({
  providedIn: 'root',
})
export class WeatherApiService {
  private forecastBaseUrl = 'https://api.open-meteo.com/v1/forecast';
  private historicalBaseUrl = 'https://archive-api.open-meteo.com/v1/archive';

  constructor(private http: HttpClient) {}

  getWeatherForecast(pastDays: number): Observable<any> {
    const params = {
      latitude: 51.5074,
      longitude: -0.1278,
      hourly: 'temperature_2m,relative_humidity_2m,pressure_msl,weather_code',
      past_days: pastDays
    };
    return this.http.get(this.forecastBaseUrl, { params });
  }

  getHistoricalWeather(startDate: string, endDate: string): Observable<any> {
    const params = {
      latitude: 51.5074,
      longitude: -0.1278, 
      start_date: startDate,
      end_date: endDate,
      hourly: 'temperature_2m,relative_humidity_2m,pressure_msl,weather_code'
    };
    return this.http.get(this.historicalBaseUrl, { params });
  }

  public mapWeatherCodeToState = mapWeatherCodeToState;
}


--- app/services/weather-api.service.spec.ts ---
import { TestBed } from '@angular/core/testing';

import { WeatherApiService } from './weather-api.service';

describe('WeatherApiService', () => {
  let service: WeatherApiService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(WeatherApiService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});



--- assets/.gitkeep ---


